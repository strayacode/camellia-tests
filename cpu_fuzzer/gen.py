import os
import random
import subprocess

TESTCASES_SOURCE_PATH   = "source/testcases.s"
FUZZER_BIN_PATH         = "./cpu_fuzzer.bin"
FUZZER_DOL_PATH         = "./cpu_fuzzer.dol"
DOLPHIN_PATH            = "dolphin-emu-nogui"
FUZZER_TMP_RESULTS_PATH = "./camellia_fuzzer.log"
VASM_PATH               = "vasmppc_std"

def error(msg):
    print("Error: ", msg)
    exit(-1)

def sext(value, bits):
    mask = 2**(bits - 1)
    return -(value & mask) + (value & ~mask)

def gen_addis():
    gpr = random.randint(0, 31)
    imm = random.randint(0, 65535)

    return f"addis {gpr}, {gpr}, {imm};"

def emit_random_state(file):
    for i in range(0, 32):
        value = random.randint(0, 0xffffffff)
        file.write(f"lis r{i}, {hex(value >> 16)}\n")
        file.write(f"addi r{i}, r{i}, {hex(sext(value & 0xffff, 16))}\n")

def emit_addi_flags(file):
    src1 = random.randint(0, 31)
    src2 = random.randint(0, 31)
    dst  = random.randint(0, 31)
    file.write(f"add. {dst}, {src1}, {src2}\n")

def emit_tests():
    with open(TESTCASES_SOURCE_PATH, 'w') as testcases:
        testcases.write("_start:\n")
        emit_random_state(testcases)

        for i in range(1000):
            emit_addi_flags(testcases)

        testcases.write("end:\n")
        testcases.write("   b end\n")

def compile_tests():
    # TODO: figure out the command we need for compiling
    # if subprocess.run(["make"]).returncode != 0:
    #     error("make failed")

    # call this command
    # ./vasmppc_std -Fbin -big -o fuzzer.dol source/main.s
    
    subprocess.run([
        VASM_PATH,
        "-Fbin",
        "-big",
        "-o", FUZZER_BIN_PATH,
        TESTCASES_SOURCE_PATH
    ])

    binary_size = os.stat(FUZZER_BIN_PATH).st_size
    binary_size_bytes = [
        (binary_size >> 24) & 0xff,
        (binary_size >> 16) & 0xff,
        (binary_size >>  8) & 0xff,
        (binary_size >>  0) & 0xff
    ]

    print(hex(binary_size))

    with open(FUZZER_DOL_PATH, 'wb') as dol:
        # insert the dol header
        dol.write(bytearray([
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ] + binary_size_bytes +[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]))

        with open(FUZZER_BIN_PATH, 'rb') as bin:
            # dump the contents of bin into dol
            dol.write(bin.read())

def run_tests():
    # pass the addr into dolphin so it knows where to put its PC
    p = subprocess.run([
        DOLPHIN_PATH, 
        "-e", FUZZER_DOL_PATH, 
        "--platform=headless"
    ], stdout=subprocess.PIPE)
    
    return p.stdout.decode()

def parse_results(results):
    print(results)
    print(":)")

def main():
    emit_tests()
    compile_tests()
    results = run_tests()

    parse_results(results)

if __name__ == "__main__":
    main()